#
# OPT-IN RULES
#
opt_in_rules:
    # Rationale: Performance is improved by using .first(where:) over .filter { }.first in collections to prevent iterating over the whole collection.
    # https://realm.github.io/SwiftLint/first_where.html
    - first_where
  
    # Rationale: Potentially improve performance, especially with iterating over large collections.
    # https://realm.github.io/SwiftLint/empty_count.html
    - empty_count # in code warning needs to be corrected
    
    # Rationale: Avoiding instantiation of an empty String by using isEmpty over ""
    # https://realm.github.io/SwiftLint/empty_string.html
    - empty_string
    
    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/colon.html
    - colon

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/comma.html
    - comma

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/shorthand_operator.html
    - shorthand_operator

    # Rationale: Encourages using the right API to solve a problem
    # https://realm.github.io/SwiftLint/for_where.html
    - for_where

    # Rationale: There are cases where you may want to declare the string enum value explicitly
    # https://realm.github.io/SwiftLint/redundant_string_enum_value.html
    - redundant_string_enum_value

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/statement_position.html
    - statement_position

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/trailing_newline.html
    - trailing_newline

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/switch_case_alignment.html
    - switch_case_alignment

    # Rationale: Provides consistency in coding style and brevity
    # https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-enumerated
    - unused_enumerated

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/compiler_protocol_init.html
    - compiler_protocol_init

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/mark.html
    - mark

    # Rationale: Clarity of code
    # https://realm.github.io/SwiftLint/multiple_closures_with_trailing_closure.html
    - multiple_closures_with_trailing_closure

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/closure_parameter_position.html
    - closure_parameter_position

    # Rationale: Provides consistency in coding style and brevity
    # https://realm.github.io/SwiftLint/redundant_optional_initialization.html
    - redundant_optional_initialization

    # Rationale: Provides consistency in coding style and follows modern practices of the language
    # https://realm.github.io/SwiftLint/trailing_semicolon.html
    - trailing_semicolon

    # Rationale: Encourages better documentation
    # https://realm.github.io/SwiftLint/fatal_error_message.html
    - fatal_error_message

    # Rationale: Provides consistency in coding style and brevity.
    # https://realm.github.io/SwiftLint/implicit_getter.html
    - implicit_getter

    # Rationale: Prevents issues with using unowned. Prefer capturing references as weak to avoid potential crashes.
    # https://realm.github.io/SwiftLint/unowned_variable_capture.html
    - unowned_variable_capture

    # Rationale: Provides consistency in coding style.
    # https://realm.github.io/SwiftLint/unused_capture_list.html
    - unused_capture_list

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/opening_brace.html
    - opening_brace

    # Rationale: Very difficult to get values from literal syntax, specially we want to verify the given values
    # https://realm.github.io/SwiftLint/discouraged_object_literal.html
    - discouraged_object_literal

    # Rationale: When using map, we think of it being used to transform a current array into something else
    # https://realm.github.io/SwiftLint/array_init.html
    - array_init

    # Rationale: Prevents retain cycles
    # https://realm.github.io/SwiftLint/class_delegate_protocol.html
    - class_delegate_protocol

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/closing_brace.html
    - closing_brace

    # Rationale: A more clear and consise way to check if something exists
    # https://realm.github.io/SwiftLint/contains_over_filter_count.html
    - contains_over_filter_count

    # Rationale: A more clear and consise way to check if something exists
    # https://realm.github.io/SwiftLint/contains_over_filter_is_empty.html
    - contains_over_filter_is_empty

    # Rationale: A more clear and consise way to check if a range exists
    # https://realm.github.io/SwiftLint/contains_over_range_nil_comparison.html
    - contains_over_range_nil_comparison

    # Rationale: Prevents coder error
    # https://realm.github.io/SwiftLint/discouraged_direct_init.html
    - discouraged_direct_init

    # Rationale: Imports are not required more than once.
    # https://realm.github.io/SwiftLint/duplicate_imports.html
    - duplicate_imports

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/empty_collection_literal.html
    - empty_collection_literal

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/empty_parentheses_with_trailing_closure.html
    - empty_parentheses_with_trailing_closure

    # Rationale: Prevents coder error
    # https://realm.github.io/SwiftLint/fallthrough.html
    - fallthrough

    # Rationale: UI elements should only be configurable by their owners and not be exposed to others
    # https://realm.github.io/SwiftLint/private_outlet.html
    - private_outlet

    # Rationale: UI elements should only be configurable by their owners and not be exposed to others
    # https://realm.github.io/SwiftLint/private_action.html
    - private_action

    # Rationale: There should be only XCTestCase per file
    # https://realm.github.io/SwiftLint/single_test_class.html
    - single_test_class

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/vertical_whitespace.html
    - vertical_whitespace

    # Rationale: Provides consistency in coding style and brevity
    # https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-optional-binding
    - unused_optional_binding

    # Rationale: Provides consistency in coding style and follows modern practices of the language
    # https://realm.github.io/SwiftLint/control_statement.html
    - control_statement

    # Rationale: Provides consistency in coding style
    # https://realm.github.io/SwiftLint/closure_spacing.html
    - closure_spacing

    # Rationale: Avoids memory leaks patterns
    # https://realm.github.io/SwiftLint/weak_delegate.html
    - weak_delegate


#
# DISABLED RULES
# rule identifiers to exclude from running
#
disabled_rules:

    # Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions
    # https://realm.github.io/SwiftLint/force_cast.html
    # (Can be opt-in)
    - force_cast

    # Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions
    # https://realm.github.io/SwiftLint/force_try.html
    # (Can be opt-in)
    - force_try

    # Rationale: A nil bool is a tri-state variable which can be modeled more clearly
    # https://realm.github.io/SwiftLint/discouraged_optional_boolean.html
    # (Can be opt-in)
    - discouraged_optional_boolean

    #####################

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/cyclomatic_complexity.html
    - cyclomatic_complexity

    # Rationale: Xcode auto indentation can cause this warning
    # https://realm.github.io/SwiftLint/trailing_whitespace.html
    - trailing_whitespace
    
    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/identifier_name.html
    - identifier_name
    
    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/comment_spacing.html
    - comment_spacing

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/type_name.html
    - type_name

    # Rationale: Custom rule needs to be introduce where fixed format for ToDo can be given
    # https://realm.github.io/SwiftLint/todo.html
    - todo

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/large_tuple.html
    - large_tuple

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/inclusive_language.html
    - inclusive_language

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/nesting.html
    - nesting

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/file_length.html
    - file_length

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/function_body_length.html
    - function_body_length

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/function_parameter_count.html
    - function_parameter_count

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/line_length.html
    - line_length

    # Rationale: Arbitrary restriction
    # https://realm.github.io/SwiftLint/type_body_length.html
    - type_body_length



#
# Strict rules
# These rules have to follow, rule violation will fail the build in Debug mode
#
trailing_newline:
    severity: error
void_return:
    severity: error
unneeded_break_in_switch:
    severity: error
return_arrow_whitespace:
    severity: error
empty_string:
    severity: error
redundant_string_enum_value:
    severity: error
unused_enumerated:
    severity: error
fatal_error_message:
    severity: error
unowned_variable_capture:
    severity: error
duplicate_imports:
    severity: error
contains_over_range_nil_comparison:
    severity: error
contains_over_filter_count:
    severity: error
contains_over_filter_is_empty:
    severity: error
shorthand_operator:
    severity: error
empty_count:
    severity: error
first_where:
    severity: error
for_where:
    severity: error
discouraged_object_literal:
    severity: error
private_outlet:
    severity: error
multiple_closures_with_trailing_closure:
    severity: error
private_action:
    severity: error
compiler_protocol_init:
    severity: error
mark:
    severity: error
switch_case_alignment:
    severity: error
array_init:
    severity: error
statement_position:
    severity: error
redundant_optional_initialization:
    severity: error
vertical_whitespace:
    severity: error
unused_optional_binding:
    severity: error
closure_spacing:
    severity: error
control_statement:
    severity: error
opening_brace:
    severity: error
colon:
    severity: error
no_space_in_method_call:
    severity: error
comma:
    severity: error
weak_delegate:
    severity: error

#
# Custom rules
#
custom_rules:
  disable_print:
    included: ".*\\.swift"
    name: "print usage"
    regex: "((\\bprint)|(Swift\\.print))\\s*\\("
    message: "Prefer debugPrint over print"
    severity: error
  text_hardcoded_string:
    included: ".*\\.swift"
    name: "hard coded string usage"
    regex: "\\.text ?= ?\"[a-zA-Z0-1]+\""
    message: "Use HTLString instead"
    severity: error
  custom_fonts_usage:
    included: ".*\\.swift"
    name: "Custom font usage"
    regex: "\"Lato-.*\""
    message: "Use custom initializer instead ex: UIFont(lato: .regular, size: 10)"
    severity: error
  string_localization:
    included: ".*\\.swift"
    name: "String localization usage"
    regex: "NSLocalizedString(.*)"
    message: "Use custom string classes which has been introduced. i.e. HTLStrings, CommonStrings, PaymentStrings etc."
    severity: error
  use_of_custom_font:
    included: ".*\\.swift"
    name: "Custom font Usage in Hotels"
    regex: "UIFont\\(lato"
    message: "Use Custom Font class initalizer - HotelFont instead of UIfont for eg: HotelFont.font(face: .bold, size: .medium)"
    severity: error
  use_of_custom_font_init:
    included: ".*\\.swift"
    name: "Custom font Usage in Hotels"
    regex: "UIFont.init"
    message: "Use Custom Font class initalizer - HotelFont instead of UIfont.init for eg: HotelFont.font(face: .bold, size: .medium)"
    severity: error
  use_of_custom_font_face:
    included: ".*\\.swift"
    name: "Custom font Usage in Hotels"
    regex: "UIFont\\(face"
    message: "Use Custom Font class initalizer - HotelFont instead of UIfont.init for eg: HotelFont.font(face: .bold, size: .medium)"
    severity: error
  use_of_hotel_font:
    included: ".*\\.swift"
    name: "Custom font Usage in Hotels"
    regex: "HotelFont\\.font"
    message: "Use Custom Font class initalizer - HTLFont eg: HTLFont.type(.headingBase)"
    severity: error
  use_of_htl_font:
    included: ".*\\.swift"
    name: "Custom font Usage in Hotels"
    regex: "HTLFont\\.font"
    message: "Use Custom Font class initalizer - HTLFont eg: HTLFont.type(.headingBase)"
    severity: error
  use_of_textAlignment_left:
    included: ".*\\.swift"
    name: "TextAlignment Left Usage"
    regex: "textAlignment[ ]{0,}=[ A-Za-z]{0,}\\.left"
    message: "Use text Alignment .natural instead of .left - to support RTL"
    severity: error
  use_of_textAlignment_right:
    included: ".*\\.swift"
    name: "TextAlignment Right Usage"
    regex: "textAlignment[ ]{0,}=[ A-Za-z]{0,}\\.right"
    message: "Use text Alignment .inverseNatural instead of .right - to support RTL"
    severity: error
  use_of_userdefault:
    included: ".*\\.swift"
    name: "UserDefaults Usage in Hotels"
    regex: "UserDefaults\\.standard"
    message: "Instead use: @StoreSupport or SecurageStorage.standard"
    severity: error
    
# Files to scan
#
included:
- DangerRulesTest



reporter: "xcode"
